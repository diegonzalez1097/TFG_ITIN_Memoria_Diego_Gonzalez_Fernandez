{"ast":null,"code":"var _jsxFileName = \"/home/tfg/epi-cropsense/frontend/cliente/src/componentes/principal.js\";\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nfunction Principal() {\n  const [arduinos, setArduinos] = useState([]);\n  const [weather, setWeather] = useState(null);\n  useEffect(() => {\n    const fetchArduinos = async () => {\n      const userId = localStorage.getItem('userId'); // Recupera el ID del usuario del almacenamiento local\n      const token = localStorage.getItem('token'); // Recupera el token del almacenamiento local\n      try {\n        const response = await axios.get(`http://localhost:3000/users/${userId}/arduinos`, {\n          headers: {\n            'Authorization': `Bearer ${token}` // Incluye el token en la cabecera de la solicitud\n          }\n        });\n        setArduinos(response.data);\n      } catch (error) {\n        console.error('Ocurrió un error al obtener los arduinos:', error);\n      }\n    };\n    const fetchWeather = async () => {\n      try {\n        const response = await axios.get(`http://api.openweathermap.org/data/2.5/weather?q=Aviles,es&appid=9779beda2892a31af70fbdfd226e9668`);\n        setWeather(response.data);\n      } catch (error) {\n        console.error('Ocurrió un error al obtener el tiempo:', error);\n      }\n    };\n    fetchArduinos();\n    fetchWeather();\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }\n  }, \"Arduinos del usuario:\"), arduinos.map((arduino, index) => /*#__PURE__*/React.createElement(\"div\", {\n    key: index,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 11\n    }\n  }, arduino.nombre), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 11\n    }\n  }, \"Ubicaci\\xF3n: \", arduino.ubicacion), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 11\n    }\n  }, \"\\xDAltima IP: \", arduino.ultimaIP), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }\n  }, \"Fecha \\xDAltima Comunicaci\\xF3n: \", new Date(arduino.fechaUltimaComunicacion).toLocaleString()), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  }, \"Coordenadas GPS: \", arduino.coordenadasGPS.x, \", \", arduino.coordenadasGPS.y), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  }, \"MAC: \", arduino.mac))), weather && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 11\n    }\n  }, \"Tiempo en Aviles:\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 11\n    }\n  }, \"Temperatura: \", weather.main.temp - 273.15, \" \\xB0C\"), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 11\n    }\n  }, \"Descripci\\xF3n: \", weather.weather[0].description)));\n}\nexport default Principal;","map":{"version":3,"names":["React","useEffect","useState","axios","Principal","arduinos","setArduinos","weather","setWeather","fetchArduinos","userId","localStorage","getItem","token","response","get","headers","data","error","console","fetchWeather","createElement","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","map","arduino","index","key","nombre","ubicacion","ultimaIP","Date","fechaUltimaComunicacion","toLocaleString","coordenadasGPS","x","y","mac","main","temp","description"],"sources":["/home/tfg/epi-cropsense/frontend/cliente/src/componentes/principal.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\n\nfunction Principal() {\n  const [arduinos, setArduinos] = useState([]);\n  const [weather, setWeather] = useState(null);\n\n\n  useEffect(() => {\n    const fetchArduinos = async () => {\n      const userId = localStorage.getItem('userId'); // Recupera el ID del usuario del almacenamiento local\n      const token = localStorage.getItem('token'); // Recupera el token del almacenamiento local\n      try {\n        const response = await axios.get(`http://localhost:3000/users/${userId}/arduinos`, {\n          headers: {\n            'Authorization': `Bearer ${token}` // Incluye el token en la cabecera de la solicitud\n          }\n        });\n        setArduinos(response.data);\n      } catch (error) {\n        console.error('Ocurrió un error al obtener los arduinos:', error);\n      }\n    };\n    const fetchWeather = async () => {\n        try {\n          const response = await axios.get(`http://api.openweathermap.org/data/2.5/weather?q=Aviles,es&appid=9779beda2892a31af70fbdfd226e9668`);\n          setWeather(response.data);\n        } catch (error) {\n          console.error('Ocurrió un error al obtener el tiempo:', error);\n        }\n      };\n  \n      fetchArduinos();\n      fetchWeather();\n  }, []);\n\n  return (\n    <div>\n      <h1>Arduinos del usuario:</h1>\n      {arduinos.map((arduino, index) => (\n        <div key={index}>\n          <h2>{arduino.nombre}</h2>\n          <p>Ubicación: {arduino.ubicacion}</p>\n          <p>Última IP: {arduino.ultimaIP}</p>\n          <p>Fecha Última Comunicación: {new Date(arduino.fechaUltimaComunicacion).toLocaleString()}</p>\n          <p>Coordenadas GPS: {arduino.coordenadasGPS.x}, {arduino.coordenadasGPS.y}</p>\n          <p>MAC: {arduino.mac}</p>\n        </div>\n      ))}\n      {weather && (\n        <div>\n          <h1>Tiempo en Aviles:</h1>\n          <p>Temperatura: {weather.main.temp - 273.15} °C</p>\n          <p>Descripción: {weather.weather[0].description}</p>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Principal;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}